{"version":3,"sources":["App1.js","reportWebVitals.js","index.js"],"names":["App1","props","useState","count","setCount","isActive","SetActive","useEffect","interval_id","setInterval","clearInterval","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA0DeA,G,MAlDF,SAACC,GAAW,IAAD,EAEMC,mBAAS,GAFf,mBAEbC,EAFa,KAENC,EAFM,OAGUF,oBAAS,GAHnB,mBAGbG,EAHa,KAGHC,EAHG,KA2BpB,OAbAC,qBAAU,WACN,IAAIC,EAAc,KAQlB,OAPGH,EACCG,EAAcC,aAAY,WACtBL,GAAS,SAAAD,GAAK,OAAIA,EAAQ,OAC3B,KACGE,GAAsB,IAAVF,GAClBO,cAAcF,GAEX,kBAAME,cAAcF,MAC5B,CAACL,EAAOE,IAIP,sBAAKM,UAAU,WAAf,UACI,qBAAKA,UAAU,SAAf,SAEkB,IAAVR,EACI,uBAAOQ,UAAU,YAAjB,SAA8BR,IAE9B,uBAAOQ,UAAU,aAAjB,2BAGZ,sBAAKA,UAAU,WAAf,UACI,wBAAQA,UAAU,YAAYC,QAjC3B,WACXN,GAAWD,IAgCH,SACKA,EAAU,QAAU,UAEzB,wBAAQM,UAAU,YAAYC,QAhC3B,WACXN,GAAU,GACVF,EAAS,IA8BD,2BCrCDS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.64cda612.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App1.css';\n\n/**\n* @author Biky Mandal\n* @function App1\n**/\n\nconst App1 = (props) => {\n\n    const [count, setCount] = useState(0);\n    const [isActive, SetActive] = useState(false);\n\n    const toggle = () => {\n        SetActive(!isActive);\n    }\n\n    const reset_ = () => {\n        SetActive(false);\n        setCount(0);\n    }\n\n    useEffect(() => {\n        let interval_id = null\n        if(isActive){\n            interval_id = setInterval(() => {\n                setCount(count => count + 1);\n            }, 1000);\n        }else if(!isActive && count !== 0 ){\n            clearInterval(interval_id);\n        }\n        return () => clearInterval(interval_id);\n    }, [count, isActive]);\n\n\n    return (\n        <div className=\"main-div\">\n            <div className=\"Number\">\n                {\n                    count !== 0 ? \n                        <label className=\"count-lbl\">{count}</label>\n                        :\n                        <label className=\"count-lbl2\">Start Timer</label>\n                }\n            </div>\n            <div className=\"btns_div\">\n                <button className=\"Start-btn\" onClick={toggle}>\n                    {isActive? 'Pause' : 'Start'}\n                </button>   \n                <button className=\"reset-btn\" onClick={reset_}>\n                    Reset\n                </button>\n            </div>\n        </div>\n    )\n\n}\n\nexport default App1","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App1 from './App1';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App1 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}